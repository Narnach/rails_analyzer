#!/usr/bin/env ruby
require 'uri'
require 'rubygems'
require 'activesupport'
require 'rails_analyzer'

puts
puts "Rails log analyzer"
puts "Analyzes a number of rails log files and compiles an overview list."
puts
logs=[]
if $*.size==0
  logs=["log/production.log"]
else
  logs=$*
end
logs.each {|l| puts "Using log: #{l}"}
puts

times = []
logs.each do |log|
  results = `grep "Processing" #{log}`
  "Processing ConverterTaskController#get (for 127.0.0.1 at 2008-08-25 17:48:53) [GET]"
  timestamps = results.map { |line| (line =~ /Processing.*\(for .* at (\d+-\d+-\d+ \d+:\d+:\d+)\)/) ? $1 : nil}.compact
  times.concat(timestamps)
end
per_day_hour = times.group_by do |t| 
  date, time = t.split(" ")
  hour, min, sec = time.split(":")
  '%s %sh' % [date, hour]
end
per_day = times.group_by do |t| 
  date, time = t.split(" ")
  date
end
per_hour = times.group_by do |t| 
  date, time = t.split(" ")
  hour, min, sec = time.split(":")
  hour
end
per_ten_min = times.group_by do |t| 
  date, time = t.split(" ")
  hour, min, sec = time.split(":")
  '%sh%s0' % [hour, min[0,1]]
end
File.open('log_times_day_hour.txt','wb') do |f|
  per_day_hour.each do |day_hour, hits|
    f.puts '%s: %s' % [day_hour, hits.size]
  end
end
File.open('log_times_day.txt','wb') do |f|
  per_day.each do |day, hits|
    f.puts '%s: %s' % [day, hits.size]
  end
end
File.open('log_times_hour.txt','wb') do |f|
  per_hour.each do |hour, hits|
    f.puts '%s: %s' % [hour, hits.size]
  end
end
File.open('log_times_hour_relative.txt','wb') do |f|
  min_hits = nil
  per_hour.each do |hour, hits|
    hit_count = hits.size
    min_hits ||= hit_count
    min_hits = hit_count if hit_count < min_hits
  end
  per_hour.each do |hour, hits|
    f.puts '%s: %s' % [hour, hits.size - min_hits]
  end
end
File.open('log_times_ten_min_relative.txt','wb') do |f|
  min_hits = nil
  per_ten_min.each do |ten_min, hits|
    hit_count = hits.size
    min_hits ||= hit_count
    min_hits = hit_count if hit_count < min_hits
  end
  per_ten_min.each do |ten_min, hits|
    f.puts '%s: %s' % [ten_min, hits.size - min_hits]
  end
end
puts 'Wrote time-based logs'

logs.each do |log|
  results = `grep "Completed" #{log}`
  results.each do |line|
    unless line =~ /\[(.*?)\]/
      puts "Failed to parse: #{line}"
      next
    end
    next unless uri=URI.parse($1) rescue nil
    unless line =~ /Completed\ in\ ([0-9]+\.[0-9]+)/
      puts "Could not extract time from line: #{line}"
    end
    time = $1.to_f
    ParamLog.add_hit(uri.to_s,time)
    uri.query=nil
    PrettyLog.add_hit(uri.to_s,time)
  end
end

puts "------\nResults\n-----"
puts
File.open("log_hits.txt","wb") {|file| file.puts PrettyLog.to_s(:size) }
File.open("log_avg.txt","wb") {|file| file.puts PrettyLog.to_s(:avg) }
File.open("log_sum.txt","wb") {|file| file.puts PrettyLog.to_s(:sum) }
File.open("log_median.txt","wb") {|file| file.puts PrettyLog.to_s(:median) }
File.open("log_stddev.txt","wb") {|file| file.puts PrettyLog.to_s(:stddev) }
File.open('log_sum_with_params.txt', 'wb') {|file| file.puts ParamLog.to_s(:sum)}
puts "Pretty log can be found in log_*.txt"
